<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/12/13/hello/"/>
    <url>/2020/12/13/hello/</url>
    
    <content type="html"><![CDATA[<p>hello everyone!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vim</title>
    <link href="/2020/12/13/vim/"/>
    <url>/2020/12/13/vim/</url>
    
    <content type="html"><![CDATA[<h2 id="Shortcut-keys"><a href="#Shortcut-keys" class="headerlink" title="Shortcut keys"></a>Shortcut keys</h2><table><thead><tr><th align="left">Shortcut Keys</th><th align="left">Function</th></tr></thead><tbody><tr><td align="left">Main</td><td align="left"></td></tr><tr><td align="left">Escape key</td><td align="left">Gets out of the current mode into the “command mode”. All keys are bound of commands.</td></tr><tr><td align="left">i</td><td align="left">“Insert mode” for inserting text. Keys behave as expected.</td></tr><tr><td align="left">:</td><td align="left">“Last-line mode” where Vim expects you to enter a command such as to save the document.</td></tr><tr><td align="left">:ter[minal]</td><td align="left">Open a terminal window</td></tr><tr><td align="left">Navigation keys</td><td align="left"></td></tr><tr><td align="left">h</td><td align="left">moves the cursor one character to the left.</td></tr><tr><td align="left">j or Ctrl + J</td><td align="left">moves the cursor down one line.</td></tr><tr><td align="left">k or Ctrl + P</td><td align="left">moves the cursor up one line.</td></tr><tr><td align="left">l</td><td align="left">moves the cursor one character to the right.</td></tr><tr><td align="left">0</td><td align="left">moves the cursor to the beginning of the line.</td></tr><tr><td align="left">$</td><td align="left">moves the cursor to the end of the line.</td></tr><tr><td align="left">^</td><td align="left">moves the cursor to the first non-empty character of the line</td></tr><tr><td align="left">w</td><td align="left">move forward one word (next alphanumeric word)</td></tr><tr><td align="left">W</td><td align="left">move forward one word (delimited by a white space)</td></tr><tr><td align="left">5w</td><td align="left">move forward five words</td></tr><tr><td align="left">b</td><td align="left">move backward one word (previous alphanumeric word)</td></tr><tr><td align="left">B</td><td align="left">move backward one word (delimited by a white space)</td></tr><tr><td align="left">5b</td><td align="left">move backward five words</td></tr><tr><td align="left">G</td><td align="left">move to the end of the file</td></tr><tr><td align="left">gg</td><td align="left">move to the beginning of the file.</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Navigate around the document</td><td align="left"></td></tr><tr><td align="left">(</td><td align="left">jumps to the previous sentence</td></tr><tr><td align="left">)</td><td align="left">jumps to the next sentence</td></tr><tr><td align="left">{</td><td align="left">jumps to the previous paragraph</td></tr><tr><td align="left">}</td><td align="left">jumps to the next paragraph</td></tr><tr><td align="left">[[</td><td align="left">jumps to the previous section</td></tr><tr><td align="left">]]</td><td align="left">jumps to the next section</td></tr><tr><td align="left">[]</td><td align="left">jump to the end of the previous section</td></tr><tr><td align="left">][</td><td align="left">jump to the end of the next section</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Insert text</td><td align="left"></td></tr><tr><td align="left">a</td><td align="left">Insert text after the cursor</td></tr><tr><td align="left">A</td><td align="left">Insert text at the end of the line</td></tr><tr><td align="left">i</td><td align="left">Insert text before the cursor</td></tr><tr><td align="left">o</td><td align="left">Begin a new line below the cursor</td></tr><tr><td align="left">O</td><td align="left">Begin a new line above the cursor</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Special inserts</td><td align="left"></td></tr><tr><td align="left">:r [filename]</td><td align="left">Insert the file [filename] below the cursor</td></tr><tr><td align="left">:r ![command]</td><td align="left">Execute [command] and insert its output below the cursor</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Delete text</td><td align="left"></td></tr><tr><td align="left">x</td><td align="left">delete character at cursor</td></tr><tr><td align="left">dw</td><td align="left">delete a word.</td></tr><tr><td align="left">d0</td><td align="left">delete to the beginning of a line.</td></tr><tr><td align="left">d$</td><td align="left">delete to the end of a line.</td></tr><tr><td align="left">d)</td><td align="left">delete to the end of sentence.</td></tr><tr><td align="left">dgg</td><td align="left">delete to the beginning of the file.</td></tr><tr><td align="left">dG</td><td align="left">delete to the end of the file.</td></tr><tr><td align="left">dd</td><td align="left">delete line</td></tr><tr><td align="left">3dd</td><td align="left">delete three lines</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Simple replace text</td><td align="left"></td></tr><tr><td align="left">r{text}</td><td align="left">Replace the character under the cursor with {text}</td></tr><tr><td align="left">R</td><td align="left">Replace characters instead of inserting them</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Copy/Paste text</td><td align="left"></td></tr><tr><td align="left">yy</td><td align="left">copy current line into storage buffer</td></tr><tr><td align="left">[“x]yy</td><td align="left">Copy the current lines into register x</td></tr><tr><td align="left">p</td><td align="left">paste storage buffer after current line</td></tr><tr><td align="left">P</td><td align="left">paste storage buffer before current line</td></tr><tr><td align="left">[“x]p</td><td align="left">paste from register x after current line</td></tr><tr><td align="left">[“x]P</td><td align="left">paste from register x before current line</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Undo/Redo operation</td><td align="left"></td></tr><tr><td align="left">u</td><td align="left">undo the last operation.</td></tr><tr><td align="left">Ctrl+r</td><td align="left">redo the last undo.</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">f or F</td><td align="left">Search for the next occurrence of a character or go to the previous occurrence</td></tr><tr><td align="left">Bookmarks</td><td align="left"></td></tr><tr><td align="left">m {a-z A-Z}</td><td align="left">Set bookmark {a-z A-Z} at the current cursor position</td></tr><tr><td align="left">:marks</td><td align="left">List all bookmarks</td></tr><tr><td align="left">`{a-z A-Z}</td><td align="left">Jumps to the bookmark {a-z A-Z}</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Select text</td><td align="left"></td></tr><tr><td align="left">v</td><td align="left">Enter visual mode per character</td></tr><tr><td align="left">V</td><td align="left">Enter visual mode per line</td></tr><tr><td align="left">Esc</td><td align="left">Exit visual mode</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Modify selected text</td><td align="left"></td></tr><tr><td align="left">~</td><td align="left">Switch case</td></tr><tr><td align="left">d</td><td align="left">delete a word.</td></tr><tr><td align="left">c</td><td align="left">change</td></tr><tr><td align="left">y</td><td align="left">yank</td></tr><tr><td align="left">&gt;</td><td align="left">shift right</td></tr><tr><td align="left">&lt;</td><td align="left">shift left</td></tr><tr><td align="left">!</td><td align="left">filter through an external command</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">Save and quit</td><td align="left"></td></tr><tr><td align="left">:q</td><td align="left">Quits Vim but fails when file has been changed</td></tr><tr><td align="left">:w</td><td align="left">Save the file</td></tr><tr><td align="left">:w new_name</td><td align="left">Save the file with the new_name filename</td></tr><tr><td align="left">:wq</td><td align="left">Save the file and quit Vim.</td></tr><tr><td align="left">:q!</td><td align="left">Quit Vim without saving the changes to the file.</td></tr><tr><td align="left">ZZ</td><td align="left">Write file, if modified, and quit Vim</td></tr><tr><td align="left">ZQ</td><td align="left">Same as :q! Quits Vim without writing changes</td></tr><tr><td align="left">:sav[eas] file</td><td align="left">Save file as</td></tr><tr><td align="left">:clo[se]</td><td align="left">Close the current pane</td></tr></tbody></table><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><pre><code class="hljs pgsql">C-ws     Split <span class="hljs-keyword">current</span> <span class="hljs-keyword">window</span> horizontally (alternative :split)C-wv     Split <span class="hljs-keyword">current</span> <span class="hljs-keyword">window</span> vertically (alternative :vsplit)C-ww     Jump <span class="hljs-keyword">to</span> the next <span class="hljs-keyword">window</span>C-wARROW Jump <span class="hljs-keyword">to</span> <span class="hljs-keyword">window</span> left/right/top/bottom (arrow keys) <span class="hljs-keyword">to</span> the <span class="hljs-keyword">current</span>C-w#&lt;    Shrink/resize <span class="hljs-keyword">current</span> <span class="hljs-keyword">window</span> <span class="hljs-keyword">from</span> the right <span class="hljs-keyword">by</span> # (<span class="hljs-keyword">default</span> <span class="hljs-number">1</span>) C-w#&gt;    Increase/resize <span class="hljs-keyword">current</span> <span class="hljs-keyword">window</span> <span class="hljs-keyword">to</span> the right <span class="hljs-keyword">by</span> # (<span class="hljs-keyword">default</span> <span class="hljs-number">1</span>) </code></pre><h2 id="surround-vim"><a href="#surround-vim" class="headerlink" title="surround.vim"></a>surround.vim</h2><p>Surround.vim is all about “surroundings”: parentheses, brackets, quotes, XML tags, and more. The plugin provides mappings to easily delete, change and add such surroundings in pairs.</p><p>It’s easiest to explain with examples. Press <code>cs&quot;&#39;</code> inside</p><pre><code class="hljs 1c"><span class="hljs-string">&quot;Hello world!&quot;</span></code></pre><p>to change it to</p><pre><code class="hljs 1c">&#x27;Hello world!&#x27;</code></pre><p>Now press <code>cs&#39;</code> to change it to</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span></code></pre><p>To go full circle, press <code>cst&quot;</code> to get</p><pre><code class="hljs 1c"><span class="hljs-string">&quot;Hello world!&quot;</span></code></pre><p>To remove the delimiters entirely, press <code>ds&quot;</code>.</p><pre><code class="hljs erlang-repl">Hello world!</code></pre><p>Now with the cursor on “Hello”, press <code>ysiw]</code> (<code>iw</code> is a text object).</p><pre><code class="hljs csharp">[<span class="hljs-meta">Hello</span>] world!</code></pre><p>Let’s make that braces and add some space (use <code>&#125;</code> instead of <code>&#123;</code> for no space): <code>cs]&#123;</code></p><pre><code class="hljs dust"><span class="hljs-template-variable">&#123; Hello &#125;</span><span class="xml"> world!</span></code></pre><p>Now wrap the entire line in parentheses with <code>yssb</code> or <code>yss)</code>.</p><pre><code class="hljs clojure">(&#123; Hello &#125; world!)</code></pre><p>Revert to the original text: <code>ds&#123;ds)</code></p><pre><code class="hljs erlang-repl">Hello world!</code></pre><p>Emphasize hello: <code>ysiw</code></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> world!</code></pre><p>Finally, let’s try out visual mode. Press a capital V (for linewise visual mode) followed by <code>S</code>.</p><pre><code class="hljs angelscript">&lt;p <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">important</span>&quot;&gt;  &lt;<span class="hljs-symbol">em</span>&gt;<span class="hljs-symbol">Hello</span>&lt;/<span class="hljs-symbol">em</span>&gt; <span class="hljs-symbol">world</span>!&lt;/<span class="hljs-symbol">p</span>&gt;</code></pre><p>This plugin is very powerful for HTML and XML editing, a niche which currently seems underfilled in Vim land. (As opposed to HTML/XML <em>inserting</em>, for which many plugins are available). Adding, changing, and removing pairs of tags simultaneously is a breeze.</p><p>The <code>.</code> command will work with <code>ds</code>, <code>cs</code>, and <code>yss</code> if you install <a href="https://github.com/tpope/vim-repeat">repeat.vim</a>.</p><h2 id="Search-and-replace"><a href="#Search-and-replace" class="headerlink" title="Search and replace"></a>Search and replace</h2><h3 id="Basic-search-and-replace"><a href="#Basic-search-and-replace" class="headerlink" title="Basic search and replace"></a>Basic search and replace</h3><p>The <code>:substitute</code> command searches for a <a href="https://vim.fandom.com/wiki/VimTip188">text pattern</a>, and replaces it with a text string. There are many options, but these are what you probably want:</p><ul><li><p><code>:s/foo/bar/g</code></p><p>Find each occurrence of ‘foo’ (in the current line only), and replace it with ‘bar’.</p></li><li><p><code>:%s/foo/bar/g</code></p><p>Find each occurrence of ‘foo’ (in all lines), and replace it with ‘bar’.</p></li><li><p><code>:%s/foo/bar/gc</code></p><p>Change each ‘foo’ to ‘bar’, but ask for confirmation first.</p></li><li><p><code>:%s/\/bar/gc</code></p><p>Change only whole words exactly matching ‘foo’ to ‘bar’; ask for confirmation.</p></li><li><p><code>:%s/foo/bar/gci</code></p><p>Change each ‘foo’ (case insensitive due to the <code>i</code> flag) to ‘bar’; ask for confirmation.</p><p><code>:%s/foo\c/bar/gc</code> is the same because <code>\c</code> makes the search case insensitive.</p><p>This may be wanted after using <code>:set noignorecase</code> to make searches case sensitive (the default).</p></li><li><p><code>:%s/foo/bar/gcI</code></p><p>Change each ‘foo’ (case sensitive due to the <code>I</code> flag) to ‘bar’; ask for confirmation.</p><p><code>:%s/foo\C/bar/gc</code> is the same because <code>\C</code> makes the search case sensitive.</p><p>This may be wanted after using <code>:set ignorecase</code> to make searches case insensitive.</p></li></ul><p>The <code>g</code> flag means <em>global</em> – each occurrence in the line is changed, <strong>rather than just the first</strong>. This tip assumes the default setting for the <code>&#39;gdefault&#39;</code> and <code>&#39;edcompatible&#39;</code> option (off), which requires that the <code>g</code> flag be included in <code>%s///g</code> to perform a global substitute. Using <code>:set gdefault</code> creates confusion because then <code>%s///</code> is global, whereas <code>%s///g</code> is not (that is, <code>g</code> reverses its meaning).</p><p>When using the <code>c</code> flag, you need to confirm for each match what to do. Vim will output something like: <code>replace with foobar (y/n/a/q/l/^E/^Y)?</code> (where foobar is the replacement part of the <code>:s/.../.../</code> command. You can type <code>y</code> which means to substitute this match, <code>n</code> to skip this match, <code>a</code> to substitute this and all remaining matches (“all” remaining matches), <code>q</code> to quit the command, <code>l</code> to substitute this match and quit (think of “last”), <code>^E</code> to scroll the screen up by holding the Ctrl key and pressing E and <code>^Y</code> to scroll the screen down by holding the Ctrl key and pressing Y. However, the last two choices are only available, if your Vim is a normal, big or huge built or the insert_expand feature was enabled at compile time (look for <code>+insert_expand</code> in the output of <code>:version</code>).</p><p>Also when using the <code>c</code> flag, Vim will jump to the first match it finds starting from the top of the buffer and prompt you for confirmation to perform replacement on that match. Vim applies the <code>IncSearch</code> highlight group to the matched text to give you a visual cue as to which match it is operating on (set to <code>reverse</code> by default for all three term types as of Vim 7.3). Additionally, if more than one match is found and you have search highlighting enabled with <code>:set hlsearch</code>, Vim highlights the remaining matches with the <code>Search</code> highlight group. If you do use search highlighting, you should make sure that these two highlight groups are visually distinct or you won’t be able to easily tell which match Vim is prompting you to substitute.</p><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p><strong>Search range</strong>:</p><table><thead><tr><th><code>:s/foo/bar/g</code></th><th>Change each ‘foo’ to ‘bar’ in the current line.</th></tr></thead><tbody><tr><td><code>:%s/foo/bar/g</code></td><td>Change each ‘foo’ to ‘bar’ in all the lines.</td></tr><tr><td><code>:5,12s/foo/bar/g</code></td><td>Change each ‘foo’ to ‘bar’ for all lines from line 5 to line 12 (inclusive).</td></tr><tr><td><code>:&#39;a,&#39;bs/foo/bar/g</code></td><td>Change each ‘foo’ to ‘bar’ for all lines from mark a to mark b inclusive (see <strong>Note</strong> below).</td></tr><tr><td><code>:&#39;&lt;,&#39;&gt;s/foo/bar/g</code></td><td>When compiled with <code>+visual</code>, change each ‘foo’ to ‘bar’ for all lines within a visual selection. Vim automatically appends the visual selection range (‘&lt;,’&gt;) for any ex command when you select an area and enter <code>:</code>. Also, see <strong>Note</strong> below.</td></tr><tr><td><code>:.,$s/foo/bar/g</code></td><td>Change each ‘foo’ to ‘bar’ for all lines from the current line (.) to the last line ($) inclusive.</td></tr><tr><td><code>:.,+2s/foo/bar/g</code></td><td>Change each ‘foo’ to ‘bar’ for the current line (.) and the two next lines (+2).</td></tr><tr><td><code>:g/^baz/s/foo/bar/g</code></td><td>Change each ‘foo’ to ‘bar’ in each line starting with ‘baz’.</td></tr></tbody></table><p><strong>When searching</strong>:</p><p><strong>When replacing</strong>:</p><p>You can use <strong>other delimiters</strong> with substitute:</p><p>Save typing by using <code>\zs</code> and <code>\ze</code> to set the <strong>start and end of a pattern</strong>. For example, instead of:</p><p>Use:</p><p> :s/Copyright \zs2007\ze All Rights Reserved/2008/ </p><h2 id="Additional-examples"><a href="#Additional-examples" class="headerlink" title="Additional examples"></a>Additional examples</h2><ul><li><p><code>:%s/foo/bar/</code></p><p>On each line, replace the first occurrence of “foo” with “bar”.</p></li><li><p><code>:%s/.*\zsfoo/bar/</code></p><p>On each line, replace the last occurrence of “foo” with “bar”.</p></li><li><p><code>:%s/\//g</code></p><p>On each line, delete all occurrences of the whole word “foo”.</p></li><li><p><code>:%s/\.*//</code></p><p>On each line, delete the whole word “foo” and all following text (to end of line).</p></li><li><p><code>:%s/\.\&#123;5&#125;//</code></p><p>On each line, delete the first occurrence of the whole word “foo” and the following five characters.</p></li><li><p><code>:%s/\\zs.*//</code></p><p>On each line, delete all text following the whole word “foo” (to end of line).</p></li><li><p><code>:%s/.*\//</code></p><p>On each line, delete the whole word “foo” and all preceding text (from beginning of line).</p></li><li><p><code>:%s/.*\ze\//</code></p><p>On each line, delete all the text preceding the whole word “foo” (from beginning of line).</p></li><li><p><code>:%s/.*\(\\).*/\1/</code></p><p>On each line, delete all the text preceding and following the whole word “foo”.</p></li><li><p>`:%s/\</p><p>On each line, replace each occurrence of “foo” (which starts a word and is not followed by “bar”) by “toto”.</p></li><li><p><code>:s/^\(\w\)/\u\1/</code></p><p>If the first character at the beginning of the <em>current line only</em> is lowercase, switch it to uppercase using <code>\u</code> (see <a href="https://vim.fandom.com/wiki/Switching_case_of_characters">switching case of characters</a>).</p></li><li><p><code>:%s/\(.*\n\)\&#123;5\&#125;/&amp;\r/</code></p><p>Insert a blank line every 5 lines.</p><p>The pattern searches for <code>\(.*\n\)</code> (any line including its line ending) repeated five times (<code>\&#123;5\&#125;</code>).</p><p>The replacement is <code>&amp;</code> (the text that was found), followed by <code>\r</code> (newline).</p></li><li><p><code>:%s/\/\=len(add(list, submatch(1)))?submatch(0):submatch(0)/g</code></p><p>Get a list of search results. (the list must exist)</p><p>Sets the <code>modified</code> flag, because of the replacement, but the content is unchanged.</p><p><strong>Note</strong>: With a recent enough Vim (version 7.3.627 or higher), you can simplify this to:</p></li><li><p><code>:%s/\/\=add(list, submatch(1))/gn</code></p><p>This has the advantage, that the buffer won’t be marked modified and no extra undo state is created. The expression in the replacement part is executed in the sandbox and not allowed to modify the buffer.</p></li></ul><h2 id="Special-cases"><a href="#Special-cases" class="headerlink" title="Special cases"></a>Special cases</h2><p>For substituting patterns with corresponding case-sensitive text, Michael Geddes’s <a href="https://www.vim.org/scripts/script.php?script_id=6">keepcase</a> plugin can be used, e.g.:</p><ul><li><p><code>:%SubstituteCase/\cHello/goodBye/g</code></p><p>Substitute ‘Hello hello helLo HELLO’ by ‘Goodbye goodbye goodBye GOODBYE’</p></li></ul><p>For changing the offsets in a patch file (line number of a block), this little snippet can be used:</p><ul><li><code>s/^@@ -\(\d\+\),\(\d\+\) +\(\d\+\),\(\d\+\) @@$/\=&quot;@@ -&quot;.eval(submatch(1)+*offsetdiff*).&quot;,&quot;.submatch(2).&quot; +&quot;.eval(submatch(3)+*offsetdiff*).&quot;,&quot;.submatch(4).&quot; @@&quot;/g</code></li></ul><p>Useful when we want to strip some blocks from a patch, without patch having to complain about offset differences.</p>]]></content>
    
    
    <categories>
      
      <category>vim</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>trick</title>
    <link href="/2020/12/08/tricks/"/>
    <url>/2020/12/08/tricks/</url>
    
    <content type="html"><![CDATA[<h2 id="python时间处理库"><a href="#python时间处理库" class="headerlink" title="python时间处理库"></a>python时间处理库</h2><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> python-dateutil</code></pre><h2 id="在mongodb中插入日期类型"><a href="#在mongodb中插入日期类型" class="headerlink" title="在mongodb中插入日期类型"></a>在mongodb中插入日期类型</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymongo<span class="hljs-keyword">from</span> dateutil <span class="hljs-keyword">import</span> parserdateStr = <span class="hljs-string">&quot;2019-05-14 01:11:11&quot;</span>myDatetime = parser.parse(dateStr)client = pymongo.MongoClient(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">27017</span>)db = client[<span class="hljs-string">&quot;test&quot;</span>]db.ceshi.insert(&#123;<span class="hljs-string">&quot;date&quot;</span>: myDatetime&#125;)client.close()</code></pre><h2 id="在mongodb中查询大于-小于某个时间点的数据"><a href="#在mongodb中查询大于-小于某个时间点的数据" class="headerlink" title="在mongodb中查询大于/小于某个时间点的数据"></a>在mongodb中查询大于/小于某个时间点的数据</h2><pre><code class="hljs apache"><span class="hljs-attribute">documents</span> = collection.find(&#123;<span class="hljs-string">&quot;date&quot;</span>: &#123;<span class="hljs-string">&quot;$lt&quot;</span>: datetime(<span class="hljs-number">2019</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">40</span>,<span class="hljs-number">3</span>)&#125;&#125;).sort(&#x27;date&#x27;)</code></pre><h2 id="python-打包pandas文件"><a href="#python-打包pandas文件" class="headerlink" title="python 打包pandas文件"></a>python 打包pandas文件</h2><ol><li><p>首先第一次进行打包，会在py目录下生成spec文件，是一个打包脚本</p></li><li><p>编辑其内容。添加隐藏的包</p><pre><code class="hljs python">hiddenimports=[ <span class="hljs-string">&#x27;pandas&#x27;</span>, <span class="hljs-string">&#x27;numpy&#x27;</span> ]</code></pre></li><li><p>如果遇到 recursion limit 错误, 在spec文件中添加如下两行</p></li></ol><pre><code class="hljs python"><span class="hljs-keyword">import</span> syssys.setrecursionlimit(<span class="hljs-number">2000000</span></code></pre><h2 id="Python-datetime-格式化"><a href="#Python-datetime-格式化" class="headerlink" title="Python datetime 格式化"></a>Python datetime 格式化</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetimenow = datetime.now()now.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Command-line Environment</title>
    <link href="/2020/12/08/missing/Command-line%20Environment/"/>
    <url>/2020/12/08/missing/Command-line%20Environment/</url>
    
    <content type="html"><![CDATA[<h2 id="Pausing-and-backgrounding-processes"><a href="#Pausing-and-backgrounding-processes" class="headerlink" title="Pausing and backgrounding processes"></a>Pausing and backgrounding processes</h2><p>Signals can do other things beyond killing a process. For instance, <code>SIGSTOP</code> pauses a process. In the terminal, typing <code>Ctrl-Z</code> will prompt the shell to send a <code>SIGTSTP</code> signal, short for Terminal Stop (i.e. the terminal’s version of <code>SIGSTOP</code>).</p><p>We can then continue the paused job in the foreground or in the background using <a href="https://www.man7.org/linux/man-pages/man1/fg.1p.html"><code>fg</code></a> or <a href="http://man7.org/linux/man-pages/man1/bg.1p.html"><code>bg</code></a>, respectively.</p><pre><code class="hljs bash">$ sleep 1000^Z[1]  + 18653 suspended  sleep 1000$ nohup sleep 2000 &amp;[2] 18745appending output to nohup.out$ <span class="hljs-built_in">jobs</span>[1]  + suspended  sleep 1000[2]  - running    nohup sleep 2000$ <span class="hljs-built_in">bg</span> %1[1]  - 18653 continued  sleep 1000$ <span class="hljs-built_in">jobs</span>[1]  - running    sleep 1000[2]  + running    nohup sleep 2000$ <span class="hljs-built_in">kill</span> -STOP %1[1]  + 18653 suspended (signal)  sleep 1000$ <span class="hljs-built_in">jobs</span>[1]  + suspended (signal)  sleep 1000[2]  - running    nohup sleep 2000$ <span class="hljs-built_in">kill</span> -SIGHUP %1[1]  + 18653 hangup     sleep 1000$ <span class="hljs-built_in">jobs</span>[2]  + running    nohup sleep 2000$ <span class="hljs-built_in">kill</span> -SIGHUP %2$ <span class="hljs-built_in">jobs</span>[2]  + running    nohup sleep 2000$ <span class="hljs-built_in">kill</span> %2[2]  + 18745 terminated  nohup sleep 2000$ <span class="hljs-built_in">jobs</span></code></pre><h1 id="Terminal-Multiplexers-Tmux"><a href="#Terminal-Multiplexers-Tmux" class="headerlink" title="Terminal Multiplexers(Tmux)"></a>Terminal Multiplexers(Tmux)</h1><ul><li>Sessions</li></ul><p>  - a session is an independent workspace with one or more windows</p><ul><li><code>tmux</code> starts a new session.</li><li><code>tmux new -s NAME</code> starts it with that name.</li><li><code>tmux ls</code> lists the current sessions</li><li>Within <code>tmux</code> typing <code> d</code> detaches the current session</li><li><code>tmux a</code> attaches the last session. You can use <code>-t</code> flag to specify which</li></ul><ul><li>Windows</li></ul><p>  - Equivalent to tabs in editors or browsers, they are visually separate parts of the same session</p><ul><li><code> c</code> Creates a new window. To close it you can just terminate the shells doing ``</li><li><code> N</code> Go to the <em>N</em> th window. Note they are numbered</li><li><code> p</code> Goes to the previous window</li><li><code> n</code> Goes to the next window</li><li><code> ,</code> Rename the current window</li><li><code> w</code> List current windows</li></ul><ul><li>Panes</li></ul><p>  - Like vim splits, panes let you have multiple shells in the same visual display.</p><ul><li><code> &quot;</code> Split the current pane horizontally</li><li><code> %</code> Split the current pane vertically</li><li><code> 方向键</code> Move to the pane in the specified <em>direction</em>. Direction here means arrow keys.</li><li><code> z</code> Toggle zoom for the current pane</li><li><code> [</code> Start scrollback. You can then press <code>to start a selection and</code> to copy that selection.</li><li><code> x</code> kill pane </li></ul><ul><li>Tab<ul><li><code>c</code> create tab </li><li><code>n</code> 、<code>p&#39;</code>  、 <code>l</code>  switch <h1 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h1></li></ul></li></ul><p>It can become tiresome typing long commands that involve many flags or verbose options. For this reason, most shells support <em>aliasing</em>. A shell alias is a short form for another command that your shell will replace automatically for you. For instance, an alias in bash has the following structure:</p><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> alias_name=<span class="hljs-string">&quot;command_to_alias arg1 arg2&quot;</span></code></pre><p>Note that there is no space around the equal sign <code>=</code>, because <a href="https://www.man7.org/linux/man-pages/man1/alias.1p.html"><code>alias</code></a> is a shell command that takes a single argument.</p><p>Aliases have many convenient features:</p><pre><code class="hljs bash"><span class="hljs-comment"># Make shorthands for common flags</span><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&quot;ls -lh&quot;</span><span class="hljs-comment"># Save a lot of typing for common commands</span><span class="hljs-built_in">alias</span> gs=<span class="hljs-string">&quot;git status&quot;</span><span class="hljs-built_in">alias</span> gc=<span class="hljs-string">&quot;git commit&quot;</span><span class="hljs-built_in">alias</span> v=<span class="hljs-string">&quot;vim&quot;</span><span class="hljs-comment"># Save you from mistyping</span><span class="hljs-built_in">alias</span> sl=ls<span class="hljs-comment"># Overwrite existing commands for better defaults</span><span class="hljs-built_in">alias</span> mv=<span class="hljs-string">&quot;mv -i&quot;</span>           <span class="hljs-comment"># -i prompts before overwrite</span><span class="hljs-built_in">alias</span> mkdir=<span class="hljs-string">&quot;mkdir -p&quot;</span>     <span class="hljs-comment"># -p make parent dirs as needed</span><span class="hljs-built_in">alias</span> df=<span class="hljs-string">&quot;df -h&quot;</span>           <span class="hljs-comment"># -h prints human readable format</span><span class="hljs-comment"># Alias can be composed</span><span class="hljs-built_in">alias</span> la=<span class="hljs-string">&quot;ls -A&quot;</span><span class="hljs-built_in">alias</span> lla=<span class="hljs-string">&quot;la -l&quot;</span><span class="hljs-comment"># To ignore an alias run it prepended with \</span>\ls<span class="hljs-comment"># Or disable an alias altogether with unalias</span><span class="hljs-built_in">unalias</span> la<span class="hljs-comment"># To get an alias definition just call it with alias</span><span class="hljs-built_in">alias</span> ll<span class="hljs-comment"># Will print ll=&#x27;ls -lh&#x27;</span></code></pre><h1 id="Remote-Machines"><a href="#Remote-Machines" class="headerlink" title="Remote Machines"></a>Remote Machines</h1><p>It has become more and more common for programmers to use remote servers in their everyday work. If you need to use remote servers in order to deploy backend software or you need a server with higher computational capabilities, you will end up using a Secure Shell (SSH). As with most tools covered, SSH is highly configurable so it is worth learning about it.</p><p>To <code>ssh</code> into a server you execute a command as follows</p><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> foo<span class="hljs-variable">@bar</span>.mit.edu</code></pre><p>Here we are trying to ssh as user <code>foo</code> in server <code>bar.mit.edu</code>. The server can be specified with a URL (like <code>bar.mit.edu</code>) or an IP (something like <code>foobar@192.168.1.42</code>). Later we will see that if we modify ssh config file you can access just using something like <code>ssh bar</code>.</p><h2 id="Executing-commands"><a href="#Executing-commands" class="headerlink" title="Executing commands"></a>Executing commands</h2><p>An often overlooked feature of <code>ssh</code> is the ability to run commands directly. <code>ssh foobar@server ls</code> will execute <code>ls</code> in the home folder of foobar. It works with pipes, so <code>ssh foobar@server ls | grep PATTERN</code> will grep locally the remote output of <code>ls</code> and <code>ls | ssh foobar@server grep PATTERN</code> will grep remotely the local output of <code>ls</code>.</p><h2 id="SSH-Keys"><a href="#SSH-Keys" class="headerlink" title="SSH Keys"></a>SSH Keys</h2><p>Key-based authentication exploits public-key cryptography to prove to the server that the client owns the secret private key without revealing the key. This way you do not need to reenter your password every time. Nevertheless, the private key (often <code>~/.ssh/id_rsa</code> and more recently <code>~/.ssh/id_ed25519</code>) is effectively your password, so treat it like so.</p><h3 id="Key-generation"><a href="#Key-generation" class="headerlink" title="Key generation"></a>Key generation</h3><p>To generate a pair you can run <a href="https://www.man7.org/linux/man-pages/man1/ssh-keygen.1.html"><code>ssh-keygen</code></a>.</p><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -o -a <span class="hljs-number">100</span> -t ed<span class="hljs-number">25519</span> -f ~/.ssh/id_ed<span class="hljs-number">25519</span></code></pre><p>You should choose a passphrase, to avoid someone who gets hold of your private key to access authorized servers. Use <a href="https://www.man7.org/linux/man-pages/man1/ssh-agent.1.html"><code>ssh-agent</code></a> or <a href="https://linux.die.net/man/1/gpg-agent"><code>gpg-agent</code></a> so you do not have to type your passphrase every time.</p><p>If you have ever configured pushing to GitHub using SSH keys, then you have probably done the steps outlined <a href="https://help.github.com/articles/connecting-to-github-with-ssh/">here</a> and have a valid key pair already. To check if you have a passphrase and validate it you can run <code>ssh-keygen -y -f /path/to/key</code>.</p><h3 id="Key-based-authentication"><a href="#Key-based-authentication" class="headerlink" title="Key based authentication"></a>Key based authentication</h3><p><code>ssh</code> will look into <code>.ssh/authorized_keys</code> to determine which clients it should let in. To copy a public key over you can use:</p><pre><code class="hljs nginx"><span class="hljs-attribute">cat</span> .ssh/id_ed25519.pub | ssh foobar<span class="hljs-variable">@remote</span> <span class="hljs-string">&#x27;cat &gt;&gt; ~/.ssh/authorized_keys&#x27;</span></code></pre><p>A simpler solution can be achieved with <code>ssh-copy-id</code> where available:</p><pre><code class="hljs applescript">ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> -i .ssh/id_ed25519.pub foobar@remote</code></pre><h2 id="Copying-files-over-SSH"><a href="#Copying-files-over-SSH" class="headerlink" title="Copying files over SSH"></a>Copying files over SSH</h2><p>There are many ways to copy files over ssh:</p><ul><li><code>ssh+tee</code>, the simplest is to use <code>ssh</code> command execution and STDIN input by doing <code>cat localfile | ssh remote_server tee serverfile</code>. Recall that <a href="https://www.man7.org/linux/man-pages/man1/tee.1.html"><code>tee</code></a> writes the output from STDIN into a file.</li><li><a href="https://www.man7.org/linux/man-pages/man1/scp.1.html"><code>scp</code></a> when copying large amounts of files/directories, the secure copy <code>scp</code> command is more convenient since it can easily recurse over paths. The syntax is <code>scp path/to/local_file remote_host:path/to/remote_file</code></li><li><a href="https://www.man7.org/linux/man-pages/man1/rsync.1.html"><code>rsync</code></a> improves upon <code>scp</code> by detecting identical files in local and remote, and preventing copying them again. It also provides more fine grained control over symlinks, permissions and has extra features like the <code>--partial</code> flag that can resume from a previously interrupted copy. <code>rsync</code> has a similar syntax to <code>scp</code>.</li></ul><h2 id="SSH-Configuration"><a href="#SSH-Configuration" class="headerlink" title="SSH Configuration"></a>SSH Configuration</h2><p>We have covered many many arguments that we can pass. A tempting alternative is to create shell aliases that look like</p><pre><code class="hljs monkey"><span class="hljs-keyword">alias</span> <span class="hljs-title">my_server</span>=<span class="hljs-string">&quot;ssh -i ~/.id_ed25519 --port 2222 -L 9999:localhost:8888 foobar@remote_server</span></code></pre><p>However, there is a better alternative using <code>~/.ssh/config</code>.</p><pre><code class="hljs routeros">Host vm   <span class="hljs-built_in"> User </span>foobar    HostName 172.16.174.141   <span class="hljs-built_in"> Port </span>2222    IdentityFile ~/.ssh/id_ed25519    LocalForward 9999 localhost:8888<span class="hljs-comment"># Configs can also take wildcards</span>Host *.mit.edu   <span class="hljs-built_in"> User </span>foobaz</code></pre><p>An additional advantage of using the <code>~/.ssh/config</code> file over aliases is that other programs like <code>scp</code>, <code>rsync</code>, <code>mosh</code>, &amp;c are able to read it as well and convert the settings into the corresponding flags.</p><p>Note that the <code>~/.ssh/config</code> file can be considered a dotfile, and in general it is fine for it to be included with the rest of your dotfiles. However, if you make it public, think about the information that you are potentially providing strangers on the internet: addresses of your servers, users, open ports, &amp;c. This may facilitate some types of attacks so be thoughtful about sharing your SSH configuration.</p><p>Server side configuration is usually specified in <code>/etc/ssh/sshd_config</code>. Here you can make changes like disabling password authentication, changing ssh ports, enabling X11 forwarding, &amp;c. You can specify config settings on a per user basis.</p>]]></content>
    
    
    <categories>
      
      <category>missing</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Shell</title>
    <link href="/2020/12/08/missing/Shell/"/>
    <url>/2020/12/08/missing/Shell/</url>
    
    <content type="html"><![CDATA[<h2 id="在程序间创建连接"><a href="#在程序间创建连接" class="headerlink" title="在程序间创建连接"></a>在程序间创建连接</h2><p>信息的流动称为<strong>流</strong>，程序中存在两个流。</p><p>流入程序的称为<strong>输入流</strong>，流出的则称为<strong>输出流</strong>。</p><p>程序读取信息时会从输入流中进行读取，相反打印信息时则是输出到输出流中。</p><p>例如重定向 &gt; 可以将程序的输入流和输出流分别重定向到文件中。</p><blockquote><p>最简单的重定向是 &lt; file 和 &gt; file。这两个命令可以将程序的输入输出流分别重定向到文件：</p></blockquote><pre><code class="hljs sh">$ <span class="hljs-built_in">echo</span> hello &gt; hello.txt$ cat hello.txthello$ cat &lt; hello.txt &gt; hello2.txt$ cat hello2.txthello</code></pre><p>&gt;&gt; 表示追加内容(append)。</p><pre><code class="hljs sh">$ cat hello.txthello$ <span class="hljs-built_in">echo</span> hello &gt;&gt; hello.txt$ cat hello.txthellohello</code></pre><blockquote><p>使用管道（ pipes ），我们能够更好的利用文件重定向。 |操作符允许我们将一个程序的输出和另外一个程序的输入连接起来。</p></blockquote><p>管道线的用法实例。 </p>]]></content>
    
    
    <categories>
      
      <category>missing</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Shell Tools and Scripting</title>
    <link href="/2020/12/08/missing/Shell%20Tools%20and%20Scripting/"/>
    <url>/2020/12/08/missing/Shell%20Tools%20and%20Scripting/</url>
    
    <content type="html"><![CDATA[<h2 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h2><h3 id="不要有空格"><a href="#不要有空格" class="headerlink" title="不要有空格"></a>不要有空格</h3><p>To assign variables in bash, use the syntax <code>foo=bar</code> and access the value of the variable with <code>$foo</code>. <strong>Note that <code>foo = bar</code> will not work</strong> since it is interpreted as calling the <code>foo</code> program with arguments <code>=</code> and <code>bar</code>. In general, in shell scripts the space character will perform argument splitting. This behavior can be confusing to use at first, so always check for that.</p><h3 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h3><p>单引号内部的内容会原样输出。双引号则会进行相应的替换:</p><p>Strings in bash can be defined with <code>&#39;</code> and <code>&quot;</code> delimiters, but they are not equivalent. Strings delimited with <code>&#39;</code> are literal strings and will not substitute variable values whereas <code>&quot;</code> delimited strings will. </p><pre><code class="hljs bash">foo=bar<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$foo</span>&quot;</span><span class="hljs-comment"># prints bar</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$foo&#x27;</span><span class="hljs-comment"># prints $foo</span></code></pre><h2 id="号"><a href="#号" class="headerlink" title="$号"></a>$号</h2><ul><li><code>$0</code> - Name of the script</li><li><code>$1</code> to <code>$9</code> - Arguments to the script. <code>$1</code> is the first argument and so on.</li><li><code>$@</code> - All the arguments</li><li><code>$#</code> - Number of arguments</li><li><code>$?</code> - Return code of the previous command</li><li><code>$$</code> - Process identification number (PID) for the current script</li><li><code>!!</code> - Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing <code>sudo !!</code></li><li><code>$_</code> - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing <code>Esc</code> followed by <code>.</code></li></ul><h2 id="short-circuiting-operators-逻辑短路符号"><a href="#short-circuiting-operators-逻辑短路符号" class="headerlink" title="short-circuiting operators 逻辑短路符号"></a>short-circuiting operators 逻辑短路符号</h2><pre><code class="hljs shell">false || echo &quot;Oops, fail&quot;<span class="hljs-meta">#</span><span class="bash"> Oops, fail</span>true || echo &quot;Will not be printed&quot;<span class="hljs-meta">#</span>true &amp;&amp; echo &quot;Things went well&quot;<span class="hljs-meta">#</span><span class="bash"> Things went well</span>false &amp;&amp; echo &quot;Will not be printed&quot;<span class="hljs-meta">#</span>true ; echo &quot;This will always run&quot;<span class="hljs-meta">#</span><span class="bash"> This will always run</span>false ; echo &quot;This will always run&quot;<span class="hljs-meta">#</span><span class="bash"> This will always run</span></code></pre><h2 id="大括号"><a href="#大括号" class="headerlink" title="{} 大括号"></a>{} 大括号</h2><pre><code class="hljs bash">convert image.&#123;png,jpg&#125;<span class="hljs-comment"># Will expand to</span>convert image.png image.jpgcp /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath<span class="hljs-comment"># Will expand to</span>cp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath<span class="hljs-comment"># Globbing techniques can also be combined</span>mv *&#123;.py,.sh&#125; folder<span class="hljs-comment"># Will move all *.py and *.sh files</span>mkdir foo bar<span class="hljs-comment"># This creates files foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h</span>touch &#123;foo,bar&#125;/&#123;a..h&#125;touch foo/x bar/y<span class="hljs-comment"># Show differences between files in foo and bar</span>diff &lt;(ls foo) &lt;(ls bar)<span class="hljs-comment"># Outputs</span><span class="hljs-comment"># &lt; x</span><span class="hljs-comment"># ---</span><span class="hljs-comment"># &gt; y</span></code></pre><h2 id="find：查找文件命令"><a href="#find：查找文件命令" class="headerlink" title="find：查找文件命令"></a>find：查找文件命令</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Find all directories named src</span>find . -name src -type d<span class="hljs-meta">#</span><span class="bash"> Find all python files that have a folder named <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> their path</span>find . -path &#x27;*/test/*.py&#x27; -type f<span class="hljs-meta">#</span><span class="bash"> Find all files modified <span class="hljs-keyword">in</span> the last day</span>find . -mtime -1<span class="hljs-meta">#</span><span class="bash"> Find all zip files with size <span class="hljs-keyword">in</span> range 500k to 10M</span>find . -size +500k -size -10M -name &#x27;*.tar.gz&#x27;</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Delete all files with .tmp extension</span>find . -name &#x27;*.tmp&#x27; -exec rm &#123;&#125; \;<span class="hljs-meta">#</span><span class="bash"> Find all PNG files and convert them to JPG</span>find . -name &#x27;*.png&#x27; -exec convert &#123;&#125; &#123;&#125;.jpg \;</code></pre><h2 id="查找代码"><a href="#查找代码" class="headerlink" title="查找代码"></a>查找代码</h2><p>grep<br>  -C: 获取查找结果的上下文。(Context)<br>  -v：对结果进行反选，即输出不匹配的结果。 (Invert)<br>  -C 5 ： 输出匹配结果的前后 5 行 。<br>  -R： 递归进入子目录并搜索所有文本文件。</p><pre><code class="hljs bash"><span class="hljs-comment"># 查找所有使用了 requests 库的文件</span>rg -t py <span class="hljs-string">&#x27;import requests&#x27;</span><span class="hljs-comment"># 查找所有没有写 shebang 的文件（包含隐藏文件）</span>rg -u --files-without-match <span class="hljs-string">&quot;^#!&quot;</span><span class="hljs-comment"># 查找所有的foo字符串，并打印其之后的5行</span>rg foo -A 5<span class="hljs-comment"># 打印匹配的统计信息（匹配的行和文件的数量）</span>rg --stats PATTERN</code></pre><h2 id="文件夹导航"><a href="#文件夹导航" class="headerlink" title="文件夹导航"></a>文件夹导航</h2><p>nnn命令和ranger命令</p>]]></content>
    
    
    <categories>
      
      <category>missing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sdfds</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2020/12/08/missing/Git/"/>
    <url>/2020/12/08/missing/Git/</url>
    
    <content type="html"><![CDATA[<h2 id="snapshot-快照"><a href="#snapshot-快照" class="headerlink" title="snapshot 快照"></a>snapshot 快照</h2><p>Git models the history of a collection of files and folders within some top-level directory as a series of snapshots. In Git terminology, a file is called a “<strong>blob</strong>”, and it’s just a bunch of bytes. A directory is called a “<strong>tree</strong>”, and it maps names to blobs or trees (so directories can contain other directories). A snapshot is the top-level tree that is being tracked. For example, we might have a tree as follows:</p><pre><code class="hljs gherkin"><span class="hljs-variable">&lt;root&gt;</span> (tree)|<span class="hljs-string">+- foo (tree)</span>|<span class="hljs-string">  </span>||<span class="hljs-string">  + bar.txt (blob, contents = &quot;hello world&quot;)</span>|+- baz.txt (blob, contents = <span class="hljs-string">&quot;git is wonderful&quot;</span>)</code></pre><h2 id="Modeling-history-relating-snapshots"><a href="#Modeling-history-relating-snapshots" class="headerlink" title="Modeling history: relating snapshots"></a>Modeling history: relating snapshots</h2><p>In Git, a history is a directed acyclic graph (DAG) of snapshots. That may sound like a fancy math word, but don’t be intimidated. All this means is that each snapshot in Git refers to a set of “parents”, the snapshots that preceded it. It’s a set of parents rather than a single parent (as would be the case in a linear history) because a snapshot might descend from multiple parents, for example due to combining (merging) two parallel branches of development.</p><h3 id="commit-history"><a href="#commit-history" class="headerlink" title="commit history"></a>commit history</h3><p>Git calls these snapshots “commit”s. Visualizing a commit history** might look something like this:</p><pre><code class="hljs brainfuck"><span class="hljs-comment">o</span> &lt;-- <span class="hljs-comment">o</span> &lt;-- <span class="hljs-comment">o</span> &lt;-- <span class="hljs-comment">o</span><span class="hljs-comment"></span>            <span class="hljs-comment">^</span><span class="hljs-comment"></span>             <span class="hljs-comment">\</span><span class="hljs-comment"></span>              --<span class="hljs-literal">-</span> <span class="hljs-comment">o</span> &lt;-- <span class="hljs-comment">o</span></code></pre><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p> In the future, these branches may be merged to create a new snapshot that incorporates both of the features, producing a new history that looks like this, with the newly created merge commit shown in bold:</p><pre><code class="hljs brainfuck"><span class="hljs-comment">o</span> &lt;-- <span class="hljs-comment">o</span> &lt;-- <span class="hljs-comment">o</span> &lt;-- <span class="hljs-comment">o</span> &lt;--<span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-comment">o</span><span class="hljs-comment"></span>            <span class="hljs-comment">^</span>            <span class="hljs-comment">/</span><span class="hljs-comment"></span>             <span class="hljs-comment">\</span>          <span class="hljs-comment">v</span><span class="hljs-comment"></span>              --<span class="hljs-literal">-</span> <span class="hljs-comment">o</span> &lt;-- <span class="hljs-comment">o</span></code></pre><p>Commits in Git are <strong>immutable(不可变的)</strong>. This doesn’t mean that mistakes can’t be corrected, however; it’s just that “edits” to the commit history are actually creating entirely new commits, and references (see below) are updated to point to the new ones.</p><h2 id="Data-model-as-pseudocode-（数据模型的伪代码）"><a href="#Data-model-as-pseudocode-（数据模型的伪代码）" class="headerlink" title="Data model, as pseudocode （数据模型的伪代码）"></a>Data model, as pseudocode （数据模型的伪代码）</h2><p>It may be instructive to see Git’s data model written down in pseudocode:</p><pre><code class="hljs lasso"><span class="hljs-comment">// a file is a bunch of bytes</span><span class="hljs-keyword">type</span> blob = <span class="hljs-built_in">array</span>&lt;byte&gt;<span class="hljs-comment">// a directory contains named files and directories</span><span class="hljs-keyword">type</span> tree = <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, tree | blob&gt;<span class="hljs-comment">// a commit has parents, metadata, and the top-level tree</span><span class="hljs-keyword">type</span> commit = struct &#123;    <span class="hljs-keyword">parent</span>: <span class="hljs-built_in">array</span>&lt;commit&gt;    author: <span class="hljs-built_in">string</span>    message: <span class="hljs-built_in">string</span>    snapshot: tree&#125;</code></pre><h2 id="Objects-and-content-addressing"><a href="#Objects-and-content-addressing" class="headerlink" title="Objects and content-addressing"></a>Objects and content-addressing</h2><p>An “object” is a blob, tree, or commit:</p><pre><code class="hljs pgsql"><span class="hljs-keyword">type</span> <span class="hljs-keyword">object</span> = blob | tree | <span class="hljs-keyword">commit</span></code></pre><p>In Git data store, all objects are content-addressed by their <strong><a href="https://en.wikipedia.org/wiki/SHA-1">SHA-1 hash</a></strong>.</p><pre><code class="hljs scala">objects = map&lt;string, <span class="hljs-class"><span class="hljs-keyword">object</span><span class="hljs-title">&gt;</span></span><span class="hljs-class"></span><span class="hljs-class"><span class="hljs-title">def</span> <span class="hljs-title">store</span>(<span class="hljs-params">object</span>)</span>:    id = sha1(<span class="hljs-class"><span class="hljs-keyword">object</span>)</span><span class="hljs-class">    <span class="hljs-title">objects</span>[id] </span>= <span class="hljs-class"><span class="hljs-keyword">object</span></span><span class="hljs-class"></span><span class="hljs-class"><span class="hljs-title">def</span> <span class="hljs-title">load</span>(<span class="hljs-params">id</span>)</span>:    <span class="hljs-keyword">return</span> objects[id]</code></pre><p> Blobs, trees, and commits are unified in this way: they are all objects. <strong>When they reference other objects, they don’t actually <em>contain</em> them in their on-disk representation, but have a reference to them by their hash.</strong> </p><p>For example, the tree for the example directory structure <a href="https://missing.csail.mit.edu/2020/version-control/#snapshots">above</a> (visualized using <code>git cat-file -p 698281bc680d1995c5f4caaf3359721a5a58d48d</code>), looks like this:</p><pre><code class="hljs apache"><span class="hljs-attribute">100644</span> blob <span class="hljs-number">4448</span>adbf<span class="hljs-number">7</span>ecd<span class="hljs-number">394</span>f<span class="hljs-number">42</span>ae<span class="hljs-number">135</span>bbeed<span class="hljs-number">9676</span>e<span class="hljs-number">894</span>af<span class="hljs-number">85</span>    baz.txt<span class="hljs-attribute">040000</span> tree c<span class="hljs-number">68</span>d<span class="hljs-number">233</span>a<span class="hljs-number">33</span>c<span class="hljs-number">5</span>c<span class="hljs-number">06</span>e<span class="hljs-number">0340</span>e<span class="hljs-number">4</span>c<span class="hljs-number">224</span>f<span class="hljs-number">0</span>afca<span class="hljs-number">87</span>c<span class="hljs-number">8</span>ce<span class="hljs-number">87</span>    foo</code></pre><p>The tree itself contains pointers to its contents, <code>baz.txt</code> (a blob) and <code>foo</code> (a tree). If we look at the contents addressed by the hash corresponding to baz.txt with <code>git cat-file -p 4448adbf7ecd394f42ae135bbeed9676e894af85</code>, we get the following:</p><pre><code class="hljs actionscript">git <span class="hljs-keyword">is</span> wonderful</code></pre><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>References其实就是字典, 因为object的SHA-1hash码太长,于是做了个字典, 比如”head” “master”就是一个reference, reference是可以变的</p><p>Now, all snapshots can be identified by their SHA-1 hash. That’s inconvenient, because humans aren’t good at remembering strings of 40 hexadecimal characters.</p><p>Git’s solution to this problem is human-readable names for SHA-1 hashes, called “references”. References are pointers to commits. Unlike objects, which are immutable, references are mutable (can be updated to point to a new commit). For example, the <code>master</code> reference usually points to the latest commit in the main branch of development.</p><pre><code class="hljs python">references = map&lt;string, string&gt;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_reference</span>(<span class="hljs-params">name, id</span>):</span>    references[name] = id<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_reference</span>(<span class="hljs-params">name</span>):</span>    <span class="hljs-keyword">return</span> references[name]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_reference</span>(<span class="hljs-params">name_or_id</span>):</span>    <span class="hljs-keyword">if</span> name_or_id <span class="hljs-keyword">in</span> references:        <span class="hljs-keyword">return</span> load(references[name_or_id])    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> load(name_or_id)</code></pre><p>With this, Git can use human-readable names like “master” to refer to a particular snapshot in the history, instead of a long hexadecimal string.</p><p>One detail is that we often want a notion of “where we currently are” in the history, so that when we take a new snapshot, we know what it is relative to (how we set the <code>parents</code> field of the commit). In Git, that “where we currently are” is a special reference called “HEAD”.</p><h2 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h2><p>Finally, we can define what (roughly) is a Git <em>repository</em>: it is the data <code>objects</code> and <code>references</code>.</p><p>On disk, all Git stores are objects and references: that’s all there is to Git’s data model. All <code>git</code> commands map to some manipulation of the commit DAG by adding objects and adding/updating references.</p><p>Whenever you’re typing in any command, think about what manipulation the command is making to the underlying graph data structure. Conversely, if you’re trying to make a particular kind of change to the commit DAG, e.g. “discard uncommitted changes and make the ‘master’ ref point to commit <code>5d83f9e</code>”, there’s probably a command to do it (e.g. in this case, <code>git checkout master; git reset --hard 5d83f9e</code>).</p><h1 id="Staging-area"><a href="#Staging-area" class="headerlink" title="Staging area"></a>Staging area</h1><p>This is another concept that’s orthogonal to the data model, but it’s a part of the interface to create commits.</p><p>One way you might imagine implementing snapshotting as described above is to have a “create snapshot” command that creates a new snapshot based on the <em>current state</em> of the working directory. Some version control tools work like this, but not Git. We want clean snapshots, and it might not always be ideal to make a snapshot from the current state. For example, imagine a scenario where you’ve implemented two separate features, and you want to create two separate commits, where the first introduces the first feature, and the next introduces the second feature. Or imagine a scenario where you have debugging print statements added all over your code, along with a bugfix; you want to commit the bugfix while discarding all the print statements.</p><p>Git accommodates such scenarios by allowing you to specify which modifications should be included in the next snapshot through a mechanism called the “staging area”.</p><h1 id="Git-command-line-interface"><a href="#Git-command-line-interface" class="headerlink" title="Git command-line interface"></a>Git command-line interface</h1><p>  <a href="https://git-scm.com/book/en/v2">Pro Git</a>  这里有更多</p><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><ul><li><p><code>git help </code>: get help for a git command</p></li><li><p><code>git init</code>: creates a new git repo, with data stored in the <code>.git</code> directory</p></li><li><p><code>git status</code>: tells you what’s going on</p></li><li><p><code>git add </code>: adds files to staging area</p></li><li><pre><code class="plaintext">git commit&lt;!--hexoPostRenderEscape:&lt;pre&gt;&lt;code class=&quot;hljs markdown&quot;&gt;: creates a new commit</code></pre></li></ul><p><span class="hljs-bullet">  -</span> Write [<span class="hljs-string">good commit messages</span>](<span class="hljs-link"><a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html</a></span>)!<br><span class="hljs-bullet">  -</span> Even more reasons to write [<span class="hljs-string">good commit messages</span>](<span class="hljs-link"><a href="https://chris.beams.io/posts/git-commit/">https://chris.beams.io/posts/git-commit/</a></span>)!</p><p><span class="hljs-bullet">-</span> <span class="hljs-code"><code>git log</code></span>: shows a flattened log of history</p><p><span class="hljs-bullet">-</span> <span class="hljs-code"><code>git log --all --graph --decorate</code></span>: visualizes history as a DAG</p><p><span class="hljs-bullet">-</span> <span class="hljs-code"><code>git diff </code></span>: show changes you made relative to the staging area</p><p><span class="hljs-bullet">-</span> <span class="hljs-code"><code>git diff  </code></span>: shows differences in a file between snapshots</p><p><span class="hljs-bullet">-</span> <span class="hljs-code"><code>git checkout </code></span>: updates HEAD and current branch</p><p><span class="hljs-section">### Branching and merging</span></p><p><span class="hljs-bullet">-</span> <span class="hljs-code"><code>git branch</code></span>: shows branches</p><p><span class="hljs-bullet">-</span> <span class="hljs-code"><code>git branch </code></span>: creates a branch</p><p><span class="hljs-bullet">-</span> <span class="hljs-code">```plaintext</span><br><span class="hljs-code">  git checkout -b &lt;name&gt;</span></code></pre>:hexoPostRenderEscape–&gt;</p><p>  : creates a branch and switches to it</p><ul><li>same as <code>git branch ; git checkout </code></li></ul><ul><li><p><code>git merge </code>: merges into current branch</p></li><li><p><code>git mergetool</code>: use a fancy tool to help resolve merge conflicts</p></li><li><p><code>git rebase</code>: rebase set of patches onto a new base</p></li></ul><h3 id="Remotes"><a href="#Remotes" class="headerlink" title="Remotes"></a>Remotes</h3><ul><li><code>git remote</code>: list remotes</li><li><code>git remote add  </code>: add a remote</li><li><code>git push  :</code>: send objects to remote, and update remote reference</li><li><code>git branch --set-upstream-to=/</code>: set up correspondence between local and remote branch</li><li><code>git fetch</code>: retrieve objects/references from a remote</li><li><code>git pull</code>: same as <code>git fetch; git merge</code></li><li><code>git clone</code>: download repository from remote</li></ul><h3 id="Undo"><a href="#Undo" class="headerlink" title="Undo"></a>Undo</h3><ul><li><code>git commit --amend</code>: edit a commit’s contents/message</li><li><code>git reset HEAD </code>: unstage a file</li><li><code>git checkout -- </code>: discard changes</li></ul><h3 id="Advanced-Git"><a href="#Advanced-Git" class="headerlink" title="Advanced Git"></a>Advanced Git</h3><ul><li><code>git config</code>: Git is <a href="https://git-scm.com/docs/git-config">highly customizable</a></li><li><code>git clone --depth=1</code>: shallow clone, without entire version history</li><li><code>git add -p</code>: interactive staging</li><li><code>git rebase -i</code>: interactive rebasing</li><li><code>git blame</code>: show who last edited which line</li><li><code>git stash</code>: temporarily remove modifications to working directory</li><li><code>git bisect</code>: binary search history (e.g. for regressions)</li><li><code>.gitignore</code>: <a href="https://git-scm.com/docs/gitignore">specify</a> intentionally untracked files to ignore</li></ul><h1 id="Miscellaneous-其他"><a href="#Miscellaneous-其他" class="headerlink" title="Miscellaneous(其他)"></a>Miscellaneous(其他)</h1><ul><li><strong>GUIs</strong>: there are many <a href="https://git-scm.com/downloads/guis">GUI clients</a> out there for Git. We personally don’t use them and use the command-line interface instead.</li><li><strong>Shell integration</strong>: it’s super handy to have a Git status as part of your shell prompt (<a href="https://github.com/olivierverdier/zsh-git-prompt">zsh</a>, <a href="https://github.com/magicmonty/bash-git-prompt">bash</a>). Often included in frameworks like <a href="https://github.com/ohmyzsh/ohmyzsh">Oh My Zsh</a>.</li><li><strong>Editor integration</strong>: similarly to the above, handy integrations with many features. <a href="https://github.com/tpope/vim-fugitive">fugitive.vim</a> is the standard one for Vim.</li><li><strong>Workflows</strong>: we taught you the data model, plus some basic commands; we didn’t tell you what practices to follow when working on big projects (and there are <a href="https://nvie.com/posts/a-successful-git-branching-model/">many</a> <a href="https://www.endoflineblog.com/gitflow-considered-harmful">different</a> <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">approaches</a>).</li><li><strong>GitHub</strong>: Git is not GitHub. GitHub has a specific way of contributing code to other projects, called <a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests">pull requests</a>.</li><li><strong>Other Git providers</strong>: GitHub is not special: there are many Git repository hosts, like <a href="https://about.gitlab.com/">GitLab</a> and <a href="https://bitbucket.org/">BitBucket</a>.</li></ul><h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><ul><li><a href="https://git-scm.com/book/en/v2">Pro Git</a> is <strong>highly recommended reading</strong>. Going through Chapters 1–5 should teach you most of what you need to use Git proficiently, now that you understand the data model. The later chapters have some interesting, advanced material.</li><li><a href="https://ohshitgit.com/">Oh Shit, Git!?!</a> is a short guide on how to recover from some common Git mistakes.</li><li><a href="https://eagain.net/articles/git-for-computer-scientists/">Git for Computer Scientists</a> is a short explanation of Git’s data model, with less pseudocode and more fancy diagrams than these lecture notes.</li><li><a href="https://jwiegley.github.io/git-from-the-bottom-up/">Git from the Bottom Up</a> is a detailed explanation of Git’s implementation details beyond just the data model, for the curious.</li><li><a href="https://smusamashah.github.io/blog/2017/10/14/explain-git-in-simple-words">How to explain git in simple words</a></li><li><a href="https://learngitbranching.js.org/">Learn Git Branching</a> is a browser-based game that teaches you Git.</li></ul>]]></content>
    
    
    <categories>
      
      <category>missing</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
